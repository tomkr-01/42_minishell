# valgrind: docker run -ti -v $(PWD):/test memory-test bash -c "cd /test/; make re && valgrind --leak-check=full --show-leak-kinds=definite --track-origins=yes ./minishell;"

NAME =			minishell
PREP =			obj

CC =			gcc
RM =			rm -rf
CFLAGS =		-g #-Wall -Werror -Wextra
INC =			-I/inc

LIBFT_DIR =		libs/libft
LIBFT =			-L./$(LIBFT_DIR)/ -lft
ARCHIVE =		libs/libft/libft.a
READLINE =		-L/Users/tkruger/.brew/opt/readline/lib -lreadline

SRC_DIR =		./src/
SRCS 	=	builtin_cd.c builtin_echo.c builtin_env.c builtin_exit.c \
			builtin_export.c builtin_pwd.c builtin_unset.c builtins.c \
			environment.c \
			exec_child.c exec_pipeline.c exec_redir.c exec_scmd.c \
			exec_utils.c exec_wait.c executor.c \
			expander_utils.c expander.c \
			lexer.c main.c minishell_gnl.c \
			parse_heredoc.c parse_redir.c parser.c \
			quote_remover.c signal.c syntax_check.c \
			utils_array.c utils_clear.c utils_error.c

OBJ_DIR =		./obj/
OBJS =			$(addprefix $(OBJ_DIR), $(SRCS:.c=.o))

all: $(NAME)

$(OBJ_DIR)%.o: $(SRC_DIR)%.c
	$(CC) $(CFLAGS) $(INCLUDE) -c $< -o $@

$(NAME): $(PREP) libft_dir $(OBJS)
	$(CC) $(CFLAGS) -o $(NAME) $(OBJS) $(READLINE) $(LIBFT)

$(PREP):
	mkdir -p $(OBJ_DIR)

libft_dir:
	make -C $(LIBFT_DIR)

clean:
	make fclean -C ./libs/libft
	$(RM) $(OBJ_DIR)

fclean: clean
	$(RM) $(NAME)

re: fclean all
